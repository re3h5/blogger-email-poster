name: AI Blogger Bot with Human-like Behavior

on:
  schedule:
    # Run every 2 hours to allow for natural posting patterns
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run (ignore posting schedule)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'
      posting_pattern:
        description: 'Posting pattern to use'
        required: false
        default: 'moderate'
        type: choice
        options:
        - 'conservative'
        - 'moderate'
        - 'active'

jobs:
  blog-post:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create config directory
      run: |
        mkdir -p config
        
    - name: Setup Google credentials
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > config/credentials.json
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
    - name: Setup Blogger token
      run: |
        echo '${{ secrets.BLOGGER_TOKEN }}' > config/token.json
      env:
        BLOGGER_TOKEN: ${{ secrets.BLOGGER_TOKEN }}
        
    - name: Setup environment variables
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        BLOGGER_ID: ${{ secrets.BLOGGER_ID }}
        PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
      run: |
        echo "OPENROUTER_API_KEY=${OPENROUTER_API_KEY}" >> $GITHUB_ENV
        echo "BLOGGER_ID=${BLOGGER_ID}" >> $GITHUB_ENV
        echo "PIXABAY_API_KEY=${PIXABAY_API_KEY}" >> $GITHUB_ENV
        
    - name: Check bot status
      run: |
        python bot_manager.py status
        
    - name: Set posting pattern (if specified)
      if: ${{ github.event.inputs.posting_pattern != '' }}
      run: |
        python bot_manager.py pattern ${{ github.event.inputs.posting_pattern }}
        
    - name: Run bot with human-like behavior
      run: |
        if [ "${{ github.event.inputs.force_run }}" = "true" ]; then
          echo "üöÄ Force running bot (ignoring posting schedule)"
          python bot_manager.py forcerun
        else
          echo "ü§ñ Running bot with human-like behavior"
          python bot_manager.py run
        fi
        
    - name: Show posting statistics
      if: always()
      run: |
        echo "üìä Posting Statistics:"
        python bot_manager.py status
        echo ""
        echo "üé® Content Diversity Report:"
        python bot_manager.py diversity
        echo ""
        echo "üìà Recent Posting History:"
        python bot_manager.py history
        
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bot-logs-${{ github.run_number }}
        path: |
          *.log
          config/posting_schedule.json
          config/content_diversity.json
        retention-days: 7
        
    - name: Commit updated config files
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add config/posting_schedule.json config/content_diversity.json
        git diff --staged --quiet || git commit -m "Update posting history and diversity data [skip ci]"
        
    - name: Push changes
      if: always()
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

  # Optional: Health check job that runs more frequently
  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create config directory
      run: |
        mkdir -p config
        
    - name: Setup credentials (minimal for status check)
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > config/credentials.json
        echo '${{ secrets.BLOGGER_TOKEN }}' > config/token.json
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        BLOGGER_TOKEN: ${{ secrets.BLOGGER_TOKEN }}
        
    - name: Setup environment variables
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        BLOGGER_ID: ${{ secrets.BLOGGER_ID }}
      run: |
        echo "OPENROUTER_API_KEY=${OPENROUTER_API_KEY}" >> $GITHUB_ENV
        echo "BLOGGER_ID=${BLOGGER_ID}" >> $GITHUB_ENV
        
    - name: Health check and status report
      run: |
        echo "üè• Bot Health Check"
        echo "=================="
        python bot_manager.py status
        
        # Check if bot should be posting soon
        python -c "
        import sys
        sys.path.append('src')
        from services.posting_scheduler import PostingScheduler
        from datetime import datetime, timedelta
        
        scheduler = PostingScheduler()
        can_post, reason = scheduler.can_post_now()
        next_time = scheduler.get_next_posting_time()
        
        if next_time and next_time < datetime.now() + timedelta(hours=2):
            print('‚è∞ Bot should post within next 2 hours')
            print(f'Next posting time: {next_time}')
        else:
            print('‚úÖ Bot schedule is healthy')
        "

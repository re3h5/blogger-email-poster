#!/usr/bin/env python3
"""
Email Bot Manager - Handle blog post submissions via email.
"""
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from email.utils import formataddr
from datetime import datetime
import logging
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class EmailBotManager:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.setup_email_config()    def setup_email_config(self):
        """Setup email configuration from environment variables."""
        # Load environment variables
        self.smtp_server = 'smtp.gmail.com'  # Using Gmail SMTP
        self.smtp_port = 587  # Gmail TLS port
        self.sender_email = os.getenv('GMAIL_EMAIL')
        self.sender_name = os.getenv('GMAIL_SENDER_NAME', 'BloggerBot Newsletter')
        self.sender_password = os.getenv('GMAIL_APP_PASSWORD')
        
        # Log configuration values for debugging
        self.logger.info(f"Email Configuration:")
        self.logger.info(f"Sender Email: {self.sender_email}")
        self.logger.info(f"Sender Name: {self.sender_name}")
        self.logger.info(f"Password length: {len(self.sender_password) if self.sender_password else 0}")
        
        # Handle multiple recipients
        recipients = os.getenv('EMAIL_RECIPIENTS', '').strip()
        self.recipients = [email.strip() for email in recipients.split(',') if email.strip()]
        self.logger.info(f"Recipients: {self.recipients}")
        
        # Handle BCC recipients
        bcc = os.getenv('EMAIL_BCC', '').strip()
        self.bcc_recipients = [email.strip() for email in bcc.split(',') if email.strip()]
        self.logger.info(f"BCC Recipients: {self.bcc_recipients}")
        
        if not self.sender_email or not self.sender_password or not self.recipients:
            self.logger.error("Missing required email configuration in .env file")
            raise ValueError("Email configuration is incomplete. Check your .env file.")
            
    def send_blog_post(self, title, content, images=None):
        """
        Send a blog post via email.
        
        Args:
            title (str): The title of the blog post
            content (str): The content of the blog post
            images (list): Optional list of image paths to attach
        
        Returns:
            bool: True if email was sent successfully, False otherwise
        """
        try:
            msg = MIMEMultipart()
            msg['From'] = formataddr((self.sender_name, self.sender_email))
            msg['To'] = ', '.join(self.recipients)
            msg['Subject'] = title

            # Add formatted content
            email_content = f"""
            <html>
            <body>
            <h1>{title}</h1>
            {content}
            <p>---</p>
            <p>Generated by BloggerBot on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </body>
            </html>
            """
            msg.attach(MIMEText(email_content, 'html'))

            # Attach images if provided
            if images:
                for img_path in images:
                    if os.path.exists(img_path):
                        with open(img_path, 'rb') as img_file:
                            img = MIMEImage(img_file.read())
                            img.add_header('Content-ID', f'<{os.path.basename(img_path)}>')
                            msg.attach(img)

            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)

            self.logger.info(f"Successfully sent blog post '{title}' via email")
            return True

        except Exception as e:
            self.logger.error(f"Error sending blog post via email: {e}")
            return False

"""Email Bot Manager - Handle blog post submissions via email."""

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from email.utils import formataddr
from datetime import datetime
import logging
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class EmailBotManager:
    def __init__(self):
        """Initialize EmailBotManager with configuration from environment variables."""
        self.logger = logging.getLogger(__name__)
        self.setup_email_config()

    def setup_email_config(self):
        """Setup email configuration from environment variables."""
        # Load environment variables
        self.smtp_server = "smtp.gmail.com"  # Using Gmail SMTP
        self.smtp_port = 587  # Gmail TLS port
        self.sender_email = os.getenv("GMAIL_EMAIL")
        self.sender_name = os.getenv("GMAIL_SENDER_NAME", "BloggerBot Newsletter")
        self.sender_password = os.getenv("GMAIL_APP_PASSWORD")
        
        # Handle multiple recipients
        recipients = os.getenv("EMAIL_RECIPIENTS", "").strip()
        self.recipients = [email.strip() for email in recipients.split(",") if email.strip()]
        
        # Handle BCC recipients
        bcc = os.getenv("EMAIL_BCC", "").strip()
        self.bcc_recipients = [email.strip() for email in bcc.split(",") if email.strip()]
        
        if not self.sender_email or not self.sender_password or not self.recipients:
            self.logger.error("Missing required email configuration in .env file")
            raise ValueError("Email configuration is incomplete. Check your .env file.")

    def send_blog_post(self, title, content, images=None):
        """Send a blog post via email."""
        try:
            msg = MIMEMultipart()
            msg["From"] = formataddr((self.sender_name, self.sender_email))
            msg["To"] = ", ".join(self.recipients)
            msg["Subject"] = title

            # Add images to the content if available
            image_tags = ""
            if images:
                for i, image_result in enumerate(images):
                    if isinstance(image_result, dict) and 'path' in image_result:
                        image_path = image_result['path']
                        image_cid = f"image_{i}"
                        if os.path.exists(image_path):
                            with open(image_path, 'rb') as img_file:
                                img = MIMEImage(img_file.read())
                                img.add_header('Content-ID', f'<{image_cid}>')
                                img.add_header('Content-Disposition', 'inline', filename=os.path.basename(image_path))
                                msg.attach(img)
                                image_tags += f'<img src="cid:{image_cid}" style="max-width:100%; height:auto; display:block; margin:20px auto;"><br>'

            # Add formatted content with images
            email_content = f"""
            <html>
            <body>
            <h1 style="text-align:center;">{title}</h1>
            {image_tags}
            <div style="margin: 20px 0;">
            {content}
            </div>
            <hr>
            <p style="color: #666; font-size: 12px; text-align: center;">
            Generated by {self.sender_name} on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
            </p>
            </body>
            </html>
            """
            msg.attach(MIMEText(email_content, "html"))

            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                self.logger.info(f"Attempting to login with email: {self.sender_email}")
                server.login(self.sender_email, self.sender_password)
                
                # Send to all recipients including BCCs
                all_recipients = self.recipients + self.bcc_recipients
                server.send_message(
                    msg,
                    from_addr=self.sender_email,
                    to_addrs=all_recipients
                )

            self.logger.info(f"Successfully sent blog post '{title}' via email")
            return True

        except Exception as e:
            self.logger.error(f"Error sending blog post via email: {str(e)}")
            return False
